


I lied by omission about the example map. I didn't mention that it's
more accurate to consider the map a container of *tuples*, each of
which contains two values: the first element (key) and the second
(value).

To see this, you can use `Lens.all` to get the tuples:

```elixir
iex>    map = %{a: 1, b: 2, c: 3, d: 4, e: 5}
iex>    Deeply.get_all(map, Lens.all)
[c: 3, a: 1, d: 4, e: 5, b: 2]
```

We've gotten back a list of tuples, which is the definition of a
`Keyword` list, so IEX (via the `Inspect` protocol) doesn't show the
tuples. To make the output clearer, let's use a map with non-atom
keys:

```elixir
iex>  map = %{[:a] => 1, [:b] => 2}
%{[:a] => 1, [:b] => 2}
```

Now the `Inspect` protocol highlights the tuples:

```elixir
iex>  Deeply.get_all(map, Lens.all)
[{[:a], 1}, {[:b], 2}]
```

As containers, tuples have lenses that apply to them. For example,
`Lens2.Lenses.Indexed.at/1` (aliased to `Len2.at`) will take the nth element of a `Tuple` (as well
as of any `Enumerable`):

```elixir
iex>  Deeply.get_only({:key, :value}, Lens.at(1))
:value
```

What this means is that it seems like `Lens2.Keyed.map_values/0` be defined by the
composition of lenses:

```elixir
iex(9)>  Deeply.get_all(map, Lens.all |> Lens.at(1))
[1, 2]
```

But not quite, because `Deeply.put` (or `put_in/3`) produces an odd result:

```elixir
iex>  put_in(map, [Lens.all |> Lens.at(1)], :NEW)
[{[:a], :NEW}, {[:b], :NEW}]
```

Where's the map? What's happening here? 

Consider how you might write your own code to `put` all the values of a map. 
First, you'd iterate over the elements of the map. I'll use `for/1`:

```elixir
for {key, value} <- map do
  # ...
end
```

Within the body of the `for`, you'd set the value of the tuple's second element:

```elixir
for {key, _overwritten} <- map do
  {key, :NEW}
end
```

That produces this:

```
[{[:a], :NEW}, {[:b], :NEW}]
```

The problem is there's no code to reconstitute from the list of...........
tuples. `for/1` has a way to handle that, the `:into` clause, which builds on `Enum.into/2`:

```elixir
for {key, _overwritten} <- map, into: %{} do
  {key, :NEW}                   ^^^^^^^^^
end

# returns:
%{[:a] => :NEW, [:b] => :NEW}
```

Reconstituting the expected map requires a similar step. The lens version of `Enum.into` is `Lens2.Lenses.Enum.into/2`, and the 



Working with nested containers is inherently a recursive
operation. `Lens.all` is the first level of recursion. When applied to
a `Map`, it produces tuples. These it passes to the second level,
which deals with individual tuples. But what is the `Lens.all` code to
do with the second level's return values? 


